export const  defaultFiles = `
<weBuild action="create" fileName="package.json">
{
  "name": "webuild-app",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "build": "next build",
    "dev": "next dev",
    "lint": "next lint",
    "start": "next start"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.9.1",
    "@radix-ui/react-accordion": "1.2.2",
    "@radix-ui/react-alert-dialog": "1.1.4",
    "@radix-ui/react-aspect-ratio": "1.1.1",
    "@radix-ui/react-avatar": "1.1.2",
    "@radix-ui/react-checkbox": "1.1.3",
    "@radix-ui/react-collapsible": "1.1.2",
    "@radix-ui/react-context-menu": "2.2.4",
    "@radix-ui/react-dialog": "latest",
    "@radix-ui/react-dropdown-menu": "2.1.4",
    "@radix-ui/react-hover-card": "1.1.4",
    "@radix-ui/react-label": "2.1.1",
    "@radix-ui/react-menubar": "1.1.4",
    "@radix-ui/react-navigation-menu": "1.2.3",
    "@radix-ui/react-popover": "1.1.4",
    "@radix-ui/react-progress": "1.1.1",
    "@radix-ui/react-radio-group": "1.2.2",
    "@radix-ui/react-scroll-area": "latest",
    "@radix-ui/react-select": "2.1.4",
    "@radix-ui/react-separator": "latest",
    "@radix-ui/react-slider": "1.2.2",
    "@radix-ui/react-slot": "1.1.1",
    "@radix-ui/react-switch": "1.1.2",
    "@radix-ui/react-tabs": "1.1.2",
    "@radix-ui/react-toast": "1.2.4",
    "@radix-ui/react-toggle": "1.1.1",
    "@radix-ui/react-toggle-group": "1.1.1",
    "@radix-ui/react-tooltip": "1.1.6",
    "autoprefixer": "^10.4.20",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "1.0.4",
    "date-fns": "4.1.0",
    "embla-carousel-react": "8.5.1",
    "input-otp": "1.4.1",
    "lucide-react": "^0.454.0",
    "next": "15.2.4",
    "next-themes": "latest",
    "react": "^19",
    "react-day-picker": "8.10.1",
    "react-dom": "^19",
    "react-hook-form": "^7.54.1",
    "react-resizable-panels": "^2.1.7",
    "recharts": "2.15.0",
    "sonner": "^1.7.1",
    "tailwind-merge": "^2.5.5",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^0.9.6",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@types/node": "^22",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "postcss": "^8.5",
    "tailwindcss": "^3.4.17",
    "typescript": "^5"
  }
}
</weBuild>
<weBuild action="create" fileName="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "ESNext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}
</weBuild>
<weBuild action="create" fileName="next.config.js">
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    serverActions: true
  },
  images: {
    domains: ["images.unsplash.com"]
  }
};
module.exports = nextConfig;
</weBuild>
<weBuild action="create" fileName="postcss.config.js">
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {}
  }
};
</weBuild>
<weBuild action="create" fileName="tailwind.config.ts">
import type { Config } from "tailwindcss";
const config: Config = {
darkMode: "class",
content: [
"./app//*.{ts,tsx}",
"./components//.{ts,tsx}",
"./pages/**/.{ts,tsx}"
],
theme: {
extend: {}
},
plugins: [require("tailwindcss-animate")]
};
export default config;
</weBuild>
<weBuild action="create" fileName="app/layout.tsx">
import "./globals.css";
import { ReactNode } from "react";
export const metadata = {
title: "WeBuild App",
description: "Generated by WeBuild AI"
};
export default function RootLayout({ children }: { children: ReactNode }) {
return (
<html lang="en">
<body>{children}</body>
</html>
);
}
</weBuild>
<weBuild action="create" fileName="app/page.tsx">
export default function HomePage() {
  return (
    <div className="min-h-screen flex items-center justify-center bg-white dark:bg-black text-black dark:text-white text-3xl font-bold">
      WeBuild bulding your app.... ðŸš€
    </div>
  );
}
</weBuild>
<weBuild action="create" fileName="app/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;
html, body {
padding: 0;
margin: 0;
font-family: system-ui, sans-serif;
}
</weBuild>
<weBuild action="create" fileName="next-env.d.ts">
/// <reference types="next" />
/// <reference types="next/image-types/global" />
// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.
</weBuild>
<weBuild action="create" fileName="app/not-found.tsx">
import Link from 'next/link'
export default function NotFound() {
return (
<div className="min-h-screen flex items-center justify-center bg-white dark:bg-black">
<div className="text-center">
<h2 className="text-4xl font-bold text-black dark:text-white mb-4">404 - Not Found</h2>
<p className="text-gray-600 dark:text-gray-400 mb-6">Could not find the requested resource</p>
<Link 
       href="/"
       className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
     >
Return Home
</Link>
</div>
</div>
)
}
</weBuild>
<weBuild action="create" fileName="app/loading.tsx">
export default function Loading() {
  return (
    <div className="min-h-screen flex items-center justify-center bg-white dark:bg-black">
      <div className="text-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
        <p className="text-gray-600 dark:text-gray-400">Loading...</p>
      </div>
    </div>
  )
}
</weBuild>
<weBuild action="create" fileName="app/error.tsx">
'use client'
import { useEffect } from 'react'
export default function Error({
error,
reset,
}: {
error: Error & { digest?: string }
reset: () => void
}) {
useEffect(() => {
console.error(error)
}, [error])
return (
<div className="min-h-screen flex items-center justify-center bg-white dark:bg-black">
<div className="text-center">
<h2 className="text-4xl font-bold text-red-600 mb-4">Something went wrong!</h2>
<p className="text-gray-600 dark:text-gray-400 mb-6">
An error occurred while rendering this page.
</p>
<button
onClick={() => reset()}
className="px-6 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
>
Try again
</button>
</div>
</div>
)
}
</weBuild>
<weBuild action="create" fileName="lib/utils.ts">
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"
export function cn(...inputs: ClassValue[]) {
return twMerge(clsx(inputs))
}
</weBuild>
<weBuild action="create" fileName="components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"
const buttonVariants = cva(
"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
{
variants: {
variant: {
default: "bg-primary text-primary-foreground hover:bg-primary/90",
destructive:
"bg-destructive text-destructive-foreground hover:bg-destructive/90",
outline:
"border border-input bg-background hover:bg-accent hover:text-accent-foreground",
secondary:
"bg-secondary text-secondary-foreground hover:bg-secondary/80",
ghost: "hover:bg-accent hover:text-accent-foreground",
link: "text-primary underline-offset-4 hover:underline",
},
size: {
default: "h-10 px-4 py-2",
sm: "h-9 rounded-md px-3",
lg: "h-11 rounded-md px-8",
icon: "h-10 w-10",
},
},
defaultVariants: {
variant: "default",
size: "default",
},
}
)
export interface ButtonProps
extends React.ButtonHTMLAttributes<HTMLButtonElement>,
VariantProps<typeof buttonVariants> {
asChild?: boolean
}
const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
({ className, variant, size, asChild = false, ...props }, ref) => {
const Comp = asChild ? Slot : "button"
return (
<Comp
className={cn(buttonVariants({ variant, size, className }))}
ref={ref}
{...props}
/>
)
}
)
Button.displayName = "Button"
export { Button, buttonVariants }
</weBuild>
<weBuild action="create" fileName="components/theme-provider.tsx">
"use client"
import * as React from "react"
import { ThemeProvider as NextThemesProvider } from "next-themes"
import { type ThemeProviderProps } from "next-themes/dist/types"
export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}
</weBuild>
<weBuild action="create" fileName="components/theme-toggle.tsx">
"use client"
import * as React from "react"
import { Moon, Sun } from "lucide-react"
import { useTheme } from "next-themes"
import { Button } from "@/components/ui/button"
export function ThemeToggle() {
const { theme, setTheme } = useTheme()
return (
<Button
variant="outline"
size="icon"
onClick={() => setTheme(theme === "light" ? "dark" : "light")}
>
<Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
<Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
<span className="sr-only">Toggle theme</span>
</Button>
)
}
</weBuild>
<weBuild action="create" fileName=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz
testing
/coverage
next.js
/.next/
/out/
production
/build
misc
.DS_Store
*.pem
debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
local env files
.env*.local
vercel
.vercel
typescript
*.tsbuildinfo
next-env.d.ts
IDE
.vscode/
.idea/
OS
Thumbs.db
</weBuild>
<weBuild action="create" fileName=".eslintrc.json">
{
  "extends": "next/core-web-vitals"
}
</weBuild>

<weBuild action="terminal" command="npm install">
<weBuild action="terminal" command="npm run dev">

`


